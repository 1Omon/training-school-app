generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Enquiry {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @db.VarChar(100)
  email     String   @db.VarChar(80)
  question  String   @db.VarChar(255)
}

model User {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  email          String       @unique @db.VarChar(80)
  password       String       @db.VarChar(80)
  interest       Interest     @default(school)
  role           Role?        @default(visitor)
  Facilitator    Facilitator?
  GuildMember    GuildMember?
  Student        Student?     @relation(name: "UserToStudent")
  Applicant      Applicant?   @relation(name: "UserToApplicant")
  attendedEvents EventAttendee[]
}

model Applicant {
  id            String          @id @default(uuid())
  user          User            @relation(name: "UserToApplicant", fields: [userId], references: [id])
  userId        String          @unique
  email         String?         @db.VarChar(255)
  fname         String          @db.VarChar(255)
  lname         String          @db.VarChar(255)
  oname         String?         @db.VarChar(255)
  dob           DateTime        @db.Date()
  country       Countries       @default(ghana)
  gender        Gender
  contact       String          @db.VarChar(10)
  school        School?
  programme     String?         @db.VarChar()
  year          String?         @db.VarChar(4)
  reason        String          @db.Text()
  balance       String          @db.Text()
  laptop        Boolean         @db.Boolean()
  scholarship   Boolean         @db.Boolean()
  status        AdmissionStatus @default(pending)
  statement     String?         @db.Text()
  student       Boolean
  admissionType AdmissionType?
  batch         String
  track         Track
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  referralCode    String         @unique
  referredApplicants Applicant[] @relation("Referrals")
  referredBy      Applicant?      @relation("Referrals", fields: [referredById], references: [id])
  referredById    String?   
}

model Student {
  reference       String        @id @unique
  user            User          @relation(name: "UserToStudent", fields: [userId], references: [id])
  userId          String        @unique
  rewardPoints    Int           @default(0) @db.Integer()
  outstandingFees Float         @db.DoublePrecision()
  fname           String        @db.VarChar(255)
  lname           String        @db.VarChar(255)
  oname           String?       @db.VarChar(255)
  dob             DateTime      @db.Date()
  gender          Gender
  country         Countries     @default(ghana)
  contact         String        @db.VarChar(10)
  school          School?
  programme       String?       @db.VarChar()
  year            String?       @db.VarChar(4)
  receipts        Receipt[]
  batch           String        @db.VarChar(255)
  tasks           Task[]        @relation("StudentTasks")
  track           Track
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  admissionOffer  AdmissionType
}

model Announcement {
  id            String    @id @default(cuid())
  title         String
  content       String    @db.Text
  hasAttachment Boolean   @default(false)
  attachmentUrl String?
  sentAt        DateTime?
  sentToCount   Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([createdAt])
}

model Class {
  id           String       @id @default(uuid())
  link         String       @db.VarChar(255)
  instructor   Facilitator? @relation(fields: [instructorId], references: [id])
  instructorId String
  date         DateTime     @db.Date()
  time         DateTime     @db.Time()
  module       Module       @relation(fields: [moduleId], references: [id])
  moduleId     String
}

model Facilitator {
  id       String  @id @default(uuid())
  user     User    @relation(fields: [userId], references: [id])
  userId   String  @unique
  bio      String  @db.VarChar(255)
  module   Module  @relation(fields: [moduleId], references: [id])
  moduleId String
  classes  Class[]
}

model GuildMember {
  id     String    @id @default(uuid())
  user   User      @relation(fields: [userId], references: [id])
  userId String    @unique
  rank   GuildRank @default(C)
}

enum GuildRank {
  S
  A
  B
  C
}

model SchoolAdmin {
  id               String                 @id @default(uuid())
  name             String                 @db.VarChar(255)
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  email            String                 @unique @db.VarChar(80)
  password         String                 @db.VarChar(80)
  permissions      SchoolAdminPermissions
  verified         Boolean                @default(false)
  verificationCode Int?                   @db.Integer()
  otpRequestedAt   DateTime               @default(now())
}

model Receipt {
  payer       Student @relation(fields: [payerId], references: [reference])
  payerId     String
  id          String  @id @default(uuid())
  amount      Float   @db.DoublePrecision()
  paymentMode String  @db.VarChar(255)
}

model Case {
  id               String     @id @default(uuid())
  title            String     @db.VarChar(255)
  description      String     @db.VarChar(255)
  responsibilities String[]
  module           Module?    @relation(fields: [moduleId], references: [id])
  moduleId         String?
  resources        Resource[]
  isPublic         Boolean    @default(false) @db.Boolean()
}

model Resource {
  id          String       @id @default(uuid())
  name        String       @db.VarChar(255)
  description String       @db.VarChar(255)
  type        ResourceType
  category    Category
  url         String       @db.VarChar(255)
  module      Module?      @relation(fields: [moduleId], references: [id])
  moduleId    String?
  case        Case?        @relation(fields: [caseId], references: [id])
  caseId      String?
}

model Module {
  id           String        @id @default(uuid())
  description  String        @db.VarChar(255)
  facilitators Facilitator[]
  cases        Case[]
  resources    Resource[]
  task         Task[]
  classes      Class[]
}

model Mail {
  id         String   @id @default(uuid())
  subject    String   @db.VarChar(100)
  body       String   @db.Text()
  atachments String[] @db.VarChar()
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}



model Event {
  id            String   @id @default(uuid())
  title         String   @db.VarChar(100)
  description   String   @db.Text()
  attendees     EventAttendee[]  // Many-to-many relation with User
  date      DateTime
  time       DateTime? 
  guestSpeakers String[]   
  location   String   @db.VarChar(255)
  link   String   @db.VarChar(255)
  banner   String   @db.VarChar(255)
  status        EventStatus @default(SCHEDULED) 
  type          EventType? @default(WEBINAR) 
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model EventAttendee {
  id       String @id @default(uuid())
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  event    Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId  String
  joinedAt DateTime @default(now())

  @@unique([userId, eventId]) // Ensure a user can only attend an event once
}

enum EventStatus {
  DRAFT
  SCHEDULED
  COMPLETED
  CANCELED
}

enum EventType {
  WEBINAR
  WORKSHOP
  NETWORKING
  PANEL_DISCUSSION
}


model EmailSubscriber {
  id        String   @id @default(uuid())
  email     String   @unique @db.VarChar(80)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id        String       @id @default(uuid())
  title     String       @db.VarChar(255)
  summary   String       @db.VarChar(255)
  dueDate   DateTime
  status    TaskStatus   @default(todo)
  priority  TaskPriority @default(medium)
  comments  String[]
  module    Module?      @relation(fields: [moduleId], references: [id])
  moduleId  String?
  sprint    Sprint?      @relation(fields: [sprintId], references: [id])
  sprintId  String?
  assignees Student[]    @relation("StudentTasks")
}

model Sprint {
  id    String @id @default(uuid())
  tasks Task[]
}

enum Gender {
  male
  female
}

enum School {
  knust
  ug
  ashesi
  uhas
  uds
  ucc
  uew
  aamusted
  none
}

enum Track {
  mobile
  web
  backend
  dataanalysis
}

enum SchoolAdminPermissions {
  registrar
  librarian
  support
  head
}

enum ResourceType {
  video
  audiobook
  ebook
}

enum Category {
  marketing
  technology
  entrepreneurship
  strategy
}

enum TaskStatus {
  todo
  in_progress
  completed
}

enum TaskPriority {
  low
  medium
  high
}

enum Countries {
  ghana
}

enum AdmissionStatus {
  pending
  admitted
  rejected
}

enum AdmissionType {
  full
  student
  nonStudent
}

enum Interest {
  school
  guild
  startupcenter
}

enum Role {
  applicant
  student
  facilitator
  visitor
}
