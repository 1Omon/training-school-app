generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Enquiry {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @db.VarChar(100)
  email     String   @db.VarChar(80)
  question  String   @db.VarChar(255)
}

model Applicant {
  profile     Profile?        @relation(fields: [profileId], references: [id])
  profileId   String?         @unique
  id          String          @id @default(uuid())
  fname       String          @db.VarChar(255)
  lname       String          @db.VarChar(255)
  oname       String?         @db.VarChar(255)
  dob         DateTime        @db.Date()
  gender      Gender
  country     Countries        
  school      School
  contact     String          @db.VarChar(10)
  programme   String          @db.VarChar(255)
  year        String          @db.VarChar(4)
  reason      String          @db.VarChar(255)
  balance     String          @db.VarChar(255)
  laptop      Boolean         @db.Boolean()
  scholarship Boolean         @db.Boolean()
  status      AdmissionStatus @default(pending)
  statement   String?         @db.VarChar(255)
  student     Student?
}

model Student {
  applicant    Applicant? @relation(fields: [applicantId], references: [id])
  applicantId  String?    @unique
  reference    String     @id
  rewardPoints Int        @default(0) @db.Integer()
  fees         Fee        @relation(fields: [feeId], references: [id])
  feeId        String     @unique
  batch        String     @db.VarChar(255)
  tasks        Task[]     @relation("StudentTasks")
}

model Class {
  id           String       @id @default(uuid())
  link         String       @db.VarChar(255)
  instructor   Facilitator? @relation(fields: [instructorId], references: [id])
  instructorId String
  date         DateTime     @db.Date()
  time         DateTime     @db.Time()
  module       Module       @relation(fields: [moduleId], references: [id])
  moduleId     String
}

model Fee {
  id          String    @id @default(uuid())
  scholarship Boolean   @default(false) @db.Boolean()
  balance     Float     @db.DoublePrecision()
  receipts    Receipt[]
  student     Student?
}

model Profile {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  email       String       @unique @db.VarChar(80)
  password    String       @db.VarChar(255)
  facilitator Facilitator?
  applicant   Applicant?
}

model Facilitator {
  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?  @unique
  id        String   @id @default(uuid())
  bio       String   @db.VarChar(255)
  module    Module   @relation(fields: [moduleId], references: [id])
  moduleId  String
  classes   Class[]
}

model Receipt {
  id          String  @id @default(uuid())
  amount      Float   @db.DoublePrecision()
  paymentMode String  @db.VarChar(255)
  fee         Fee?    @relation(fields: [feeId], references: [id])
  feeId       String?
}

model Case {
  id               String     @id @default(uuid())
  title            String     @db.VarChar(255)
  description      String     @db.VarChar(255)
  responsibilities String[]
  module           Module?    @relation(fields: [moduleId], references: [id])
  moduleId         String?
  resources        Resource[]
  isPublic         Boolean    @default(false) @db.Boolean()
}

model Resource {
  id          String       @id @default(uuid())
  name        String       @db.VarChar(255)
  description String       @db.VarChar(255)
  type        ResourceType
  category    Category
  url         String       @db.VarChar(255)
  module      Module?      @relation(fields: [moduleId], references: [id])
  moduleId    String?
  case        Case?        @relation(fields: [caseId], references: [id])
  caseId      String?
}

model Module {
  id           String        @id @default(uuid())
  description  String        @db.VarChar(255)
  facilitators Facilitator[]
  cases        Case[]
  resources    Resource[]
  task         Task[]
  classes      Class[]
}

model Task {
  id        String       @id @default(uuid())
  title     String       @db.VarChar(255)
  summary   String       @db.VarChar(255)
  dueDate   DateTime
  status    TaskStatus   @default(todo)
  priority  TaskPriority @default(medium)
  comments  String[]
  module    Module?      @relation(fields: [moduleId], references: [id])
  moduleId  String?
  sprint    Sprint?      @relation(fields: [sprintId], references: [id])
  sprintId  String?
  assignees Student[]    @relation("StudentTasks")
}

model Sprint {
  id    String @id @default(uuid())
  tasks Task[]
}

enum Gender {
  male
  female
}

enum School {
  knust
  ug
  ashesi
  none
}

enum ResourceType {
  video
  audiobook
  ebook
}

enum Category {
  marketing
  technology
  entrepreneurship
  strategy
}

enum TaskStatus {
  todo
  in_progress
  completed
}

enum TaskPriority {
  low
  medium
  high
}

enum Countries {
  ghana
}

enum AdmissionStatus {
  pending
  admitted
  rejected
}
